}
chi.l <- function(t, del.l,del.u){
out = C.t.t(t,del.l,del.u)/t
out
}
chi.u <- function(t,del.l ,del.u ){
out <- (1 - (2*t) + C.t.t(t,del.l,del.u))/(1-t)
}
qnorm.pasymlp <- function(x, del.l, del.u){
coeff <- del.l * as.numeric(x <= 0) + del.u * as.numeric(x > 0)
out <- coeff * exp(-abs(x) / coeff) / (del.l + del.u)
out <- ifelse(x <= 0, qnorm(out), -qnorm(out))
return(out)
}
pasympl.gauss <- function(x1, x2, del.l, del.u, rho){
den.integrand <- function(x){
sapply(x, function(xx){
r <- log(xx) - log(1 - xx)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- c(q1, q2)
out <- pmvnorm(lower = rep(-Inf, 2), upper = q, mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
out <- out * dasymlp(r, del.l, del.u)
out <- out / (xx * (1 - xx))
out})}
out <- integrate(den.integrand, lower = 0, upper = 1)$value
out}
dasympl.gauss <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <- dmvnorm(q, mean = c(0, 0), sigma = matrix(c(1, rho, rho, 1), nrow = 2), log = T)
out <- out + log(dasymlp(x1 - r, 1 - del.l, 1 - del.u)) +
log(dasymlp(x2 - r, 1 - del.l, 1 - del.u))
out <- out - dnorm(qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u), log = T) -
dnorm(qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u), log = T)
mean(exp(out))}
transform <- list(
logit = function(x, lower = 0, upper = 1){
x <- (x - lower) / (upper - lower)
return(log(x / (1 - x)))
},
inv.logit = function(x, lower = 0, upper = 1){
p <- exp(x) / (1 + exp(x))
p <- p * (upper - lower) + lower
return(p)
}
)
c.u1.u2 <- function(u1, u2, del.l, del.u, rho){
x.1 <- qasympl.sum(u1, del.l, del.u)
x.2 <- qasympl.sum(u2, del.l, del.u)
out <- dasympl.gauss(x.1, x.2, del.l, del.u, rho) /
(dasympl.sum(x.1, del.l, del.u) * dasympl.sum(x.2, del.l, del.u))
out}
neg.log <- function(params){
del.l <- transform$inv.logit(params[1], 0.01, 0.99)
del.u <- transform$inv.logit(params[2], 0.01, 0.99)
rho <- transform$inv.logit(params[3], -0.99, 0.99)
out <- sum(sapply(1:nrow(X), function(i){
-log(c.u1.u2(X[i, 1], X[i, 2], del.l, del.u, rho))}))
out}
#####################################################
init <- c(transform$logit(del.l, 0.01, 0.99),
transform$logit(del.u, 0.01, 0.99),
transform$logit(rho, -0.99, 0.99))
mles <- optim(init, neg.log, hessian = T)
transform$inv.logit(mles$par[1], 0.01, 0.99)
transform$inv.logit(mles$par[2], 0.01, 0.99)
transform$inv.logit(mles$par[3], -0.99, 0.99)
Indigo <- read_csv("INGL Historical Data.csv")
SpiceJet <- read_csv("SPJT Historical Data.csv")
Indigo <- Indigo[-c(497:507), ]
SpiceJet <- SpiceJet[-c(498:508), ]
years.Indigo <- as.vector(sapply(Indigo$Date, function(x){
as.numeric(strsplit(x, split = " ")[[1]][3])}))
years.SpiceJet <- as.vector(sapply(SpiceJet$Date, function(x){
as.numeric(strsplit(x, split = " ")[[1]][3])}))
days.Indigo <- as.vector(sapply(Indigo$Date, function(x){
as.numeric(strsplit(strsplit(x, split = ", ")[[1]][1], split = " ")[[1]][2])}))
days.SpiceJet <- as.vector(sapply(SpiceJet$Date, function(x){
as.numeric(strsplit(strsplit(x, split = ", ")[[1]][1], split = " ")[[1]][2])}))
months.Indigo <- as.vector(sapply(Indigo$Date, function(x){strsplit(x, split = " ")[[1]][1]}))
months.SpiceJet <- as.vector(sapply(SpiceJet$Date, function(x){strsplit(x, split = " ")[[1]][1]}))
months.Indigo <- as.vector(sapply(months.Indigo, function(x){which(month.abb == x)}))
months.SpiceJet <- as.vector(sapply(months.SpiceJet, function(x){which(month.abb == x)}))
identify.issue <- which(sapply(1:507, function(i){
sum((months.Indigo - months.SpiceJet[-i])^2) +
sum((years.Indigo - years.SpiceJet[-i])^2) +
sum((days.Indigo - days.SpiceJet[-i])^2)}) == 0)
SpiceJet <- SpiceJet[-identify.issue, ]
years <- years.Indigo
months <- months.Indigo
days <- days.Indigo
nt <- length(Indigo$Date)
logreturn.Indigo <- log(Indigo$Price[-1]) - log(Indigo$Price[-nt])
logreturn.SpiceJet <- log(SpiceJet$Price[-1]) - log(SpiceJet$Price[-nt])
par(mfrow = c(1, 2))
acf(logreturn.Indigo)
acf(logreturn.SpiceJet)
######################################
dates <- mdy(Indigo$Date)
df <- data.frame(date = dates[-1],
Indigo =logreturn.Indigo,
SpiceJet =logreturn.SpiceJet)
##############################################
p <- ggplot(df) + geom_line(aes(x = date, y = SpiceJet), size = 1) +
xlab(NULL) + ylab("Average-Price") +
ggtitle("Daily average price of SpiceJet airlines") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),
plot.title = element_text(size=20))
library(mvtnorm)
library(ismev)
library(readr)
library(evd)
library(ggplot2)
library(ggplot)
library(ggplot2)
library(ggplot2)
##############################################
p <- ggplot(df) + geom_line(aes(x = date, y = SpiceJet), size = 1) +
xlab(NULL) + ylab("Average-Price") +
ggtitle("Daily average price of SpiceJet airlines") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),
plot.title = element_text(size=20))
######################################
dates <- mdy(Indigo$Date)
df <- data.frame(date = dates[-1],
Indigo =logreturn.Indigo,
SpiceJet =logreturn.SpiceJet)
######################################
dates <- mdy(Indigo$Date)
library(lubridate)
######################################
dates <- mdy(Indigo$Date)
df <- data.frame(date = dates[-1],
Indigo =logreturn.Indigo,
SpiceJet =logreturn.SpiceJet)
##############################################
p <- ggplot(df) + geom_line(aes(x = date, y = SpiceJet), size = 1) +
xlab(NULL) + ylab("Average-Price") +
ggtitle("Daily average price of SpiceJet airlines") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),
plot.title = element_text(size=20))
print(p)
###########################################
p <- ggplot(df) + geom_point(aes(x = Indigo, y = SpiceJet)) + ggtitle("Bivariate Plot of SpiceJet and Indigo logreturn data") +
theme(plot.title = element_text(hjust = 1))+
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),
plot.title = element_text(size=20))
print(p)
################################################
Indigo.rank <- (rank(df$Indigo) + 0.5) / (length(df$Indigo) + 1)
SpiceJet.rank <- (rank(df$SpiceJet) + 0.5) / (length(df$SpiceJet) + 1)
df2 <- data.frame(Indigo.rank = Indigo.rank,
SpiceJet.rank = SpiceJet.rank)
p <- ggplot(df2) + geom_point(aes(x = Indigo.rank, y = SpiceJet.rank)) + ggtitle("INGL and SPJT scatter plot after rank transformation") +
theme(plot.title = element_text(hjust = 1))+
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),
plot.title = element_text(size=20))
print(p)
C.t.t = function(t,del.l,del.u){
x<- qsympl.sum(t,del.l,del.u)
out <- pasympl.sum(x, del.l,del.u)
out
}
chi.l = function(t,del.l, del.u){
C.t.t(t, del.l =del.l ,del.u)
}
chi.u = function(del.l,del.u){
sapply(seq(0,1,0.01), C.t.t , del.l = del.u, del.u = del.u)
}
X
x
df
df$Indigo
#############################################33#whole data
init <- c(transform$logit(0.2, 0.01, 0.51),
transform$logit(0.2, 0.49, 0.99),
transform$logit(0.2, -0.99, 0.99))
#############################################33#whole data
init <- c(transform$logit(0.3, 0.01, 0.51),
transform$logit(0.4, 0.49, 0.99),
transform$logit(0.5, -0.99, 0.99))
#############################################33#whole data
init <- c(transform$logit(0.3, 0.01, 0.99),
transform$logit(0.4, 0.01, 0.99),
transform$logit(0.5, -0.99, 0.99))
init <- c(transform$logit(0.3, 0.01, 0.5),
transform$logit(0.4, 0.5, 0.99),
transform$logit(0.2, -0.99, 0.99))
init <- c(transform$logit(0.3, 0.01, 0.5),
transform$logit(0.4, 0.5, 0.99),
transform$logit(0.2, -0.99, 0.99))
x
init <- c(transform$logit(0.3, 0.01, 0.99),
transform$logit(0.7, 0.01, 0.99),
transform$logit(0.2, -0.99, 0.99))
X <- cbind(ingl.after, spcjt.after)
#############################################33#whole data
init <- c(transform$logit(0.3, 0.01, 0.99),
transform$logit(0.7, 0.01, 0.99),
transform$logit(0.2, -0.99, 0.99))
X <- cbind(df$Indigo, df$SpiceJet)
X <- apply(X, 2, rank) / (nrow(X) + 1)
# emp.para <- gev.fit(X[,1])$mle
# X[,1] <- pgev(X[,1], loc =  emp.para[1], scale = emp.para[2] , shape = emp.para[3] )
# emp.para <- gev.fit(X[,2])$mle
# X[,2] <- pgev(X[,2], loc =  emp.para[1], scale = emp.para[2] , shape = emp.para[3] )
#
mles <- optim(init, neg.log, hessian = T)$par
mles <- c(transform$inv.logit(mles$par[1], 0.01, 0.51),
transform$inv.logit(mles$par[2], 0.49, 0.99),
transform$inv.logit(mles$par[3], -0.99, 0.99))
save.image(file = "real_data.RData")
mles
mles <- c(transform$inv.logit(mles[1], 0.01, 0.99),
transform$inv.logit(mles[2], 0.01, 0.99),
transform$inv.logit(mles[3], -0.99, 0.99))
mles
#############################################33#whole data
init <- c(transform$logit(0.24, 0.01, 0.99),
transform$logit(0.48, 0.01, 0.99),
transform$logit(0.2, -0.99, 0.99))
X <- cbind(df$Indigo, df$SpiceJet)
X <- apply(X, 2, rank) / (nrow(X) + 1)
# emp.para <- gev.fit(X[,1])$mle
# X[,1] <- pgev(X[,1], loc =  emp.para[1], scale = emp.para[2] , shape = emp.para[3] )
# emp.para <- gev.fit(X[,2])$mle
# X[,2] <- pgev(X[,2], loc =  emp.para[1], scale = emp.para[2] , shape = emp.para[3] )
#
mles <- optim(init, neg.log, hessian = T)$par
mles <- c(transform$inv.logit(mles[1], 0.01, 0.99),
transform$inv.logit(mles[2], 0.01, 0.99),
transform$inv.logit(mles[3], -0.99, 0.99))
mles
rho = mles[3]
del.l = mles[1]
del.u = mles[2]
C.t.t = function(t,del.l,del.u,rho){
solver <- function(t,del.l,del.u,rho){
x<- qasympl.sum(t,del.l,del.u)
out <- pasympl.gauss(t,t, del.l,del.u,rho)
out
}
sapply(t, solver , del.l = del.l ,del.u = del.u,rho=rho)
}
chi.l <- function(t, del.l,del.u,rho){
out = C.t.t(t,del.l,del.u,rho)/t
out
}
chi.u <- function(t,del.l ,del.u,rho){
out <- (1 - (2*t) + C.t.t(t,del.l,del.u,rho))/(1-t)
out
}
rho
del.l
del.u
base <- ggplot() + xlim(0, 1)
base + geom_function(fun = chi.l, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
coord_cartesian(ylim = c(0, 1)) + xlab("x") + ylab("Lower tail Coefficient")
warnings()
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.l, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
coord_cartesian(ylim = c(0, 1)) + xlab("x") + ylab("Lower tail Coefficient")
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
coord_cartesian(ylim = c(0, 1)) + xlab("x") + ylab("Lower tail Coefficient")
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
coord_cartesian(  xlab("x") + ylab("Lower tail Coefficient")
)
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1))
+xlab("x") + ylab("Lower tail Coefficient")
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("x") + ylab("Lower tail Coefficient")
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <- dmvnorm(q, mean = c(0, 0), sigma = matrix(c(1, rho, rho, 1), nrow = 2), log = T)
mean(exp(out))
}
C.t.t = function(t,del.l,del.u,rho){
solver <- function(t,del.l,del.u,rho){
x<- qasympl.sum(t,del.l,del.u)
out <- pasympl.gauss1(t,t, del.l,del.u,rho)
out
}
sapply(t, solver , del.l = del.l ,del.u = del.u,rho=rho)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.2)
pasympl.gauss(0.1,0.3,0.3,0.5,0.2)
pasympl.gauss(0.1,0.3,0.3,0.5,0.1)
pasympl.gauss1(0.1,0.3,0.3,0.5,0.)
pasympl.gauss1(0.1,0.3,0.3,0.5,0.1)
pasympl.gauss1(0.1,0.3,0.3,0.5,0.4)
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <- dmvnorm(q, mean = c(0, 0), sigma = matrix(c(1, rho, rho, 1), nrow = 2))
mean(out)
}
pasympl.gauss(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e6),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <- dmvnorm(q, mean = c(0, 0), sigma = matrix(c(1, rho, rho, 1), nrow = 2))
mean(out)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <- dmvnorm(q, mean = c(0, 0), sigma = matrix(c(1, rho, rho, 1), nrow = 2))
mean(out)
}
C.t.t = function(t,del.l,del.u,rho){
solver <- function(t,del.l,del.u,rho){
x<- qasympl.sum(t,del.l,del.u)
out <- pasympl.gauss1(t,t, del.l,del.u,rho)
out
}
sapply(t, solver , del.l = del.l ,del.u = del.u,rho=rho)
}
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("x") + ylab("Lower tail Coefficient")
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.l, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("x") + ylab("Lower tail Coefficient")
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <- pmvnorm(q, mean = c(0, 0), sigma = matrix(c(1, rho, rho, 1), nrow = 2))
mean(out)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <-pmvnorm(lower = rep(-Inf, 2), upper = q, mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
mean(out)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <-mapply(pmvnorm(lower = rep(-Inf, 2), upper = q, mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1] , q)
mean(out)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
r <- qasymlp(runif(1e3),del.l, del.u)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <-mapply(pmvnorm(lower = rep(-Inf, 2), upper = c(1,2), mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1] , q)
mean(out)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
r <- qasymlp(runif(1e3),del.l, del.u)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <-pmvnorm(lower = rep(-Inf, 2), upper = c(1,2), mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
mean(out)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out = numeric(length = dim(q)[1])
for(i in 1:dim(q)[1]){
out[i] = pmvnorm(lower = rep(-Inf, 2), upper = c(q[i][1],q[i][2]), mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
}
mean(out)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
x1 = 0.2
x2 =0.3
x1 = 0.1
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q1
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
q
q[1][1]
pmvnorm(lower = rep(-Inf, 2), upper = c(q[1][1],q[1][2]), mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
c(q[1][1],q[1][2])
q$q1[1]
q$q1
q
q[1,2]
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out = numeric(length = dim(q)[1])
for(i in 1:dim(q)[1]){
out[i] = pmvnorm(lower = rep(-Inf, 2), upper = c(q[i,1],q[i,2]), mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
}
mean(out)
}
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e4),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out = numeric(length = dim(q)[1])
for(i in 1:dim(q)[1]){
out[i] = pmvnorm(lower = rep(-Inf, 2), upper = c(q[i,1],q[i,2]), mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
}
mean(out)
}
pasympl.gauss(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1(0.1,0.3,0.3,0.5,0.8)
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out = numeric(length = dim(q)[1])
for(i in 1:dim(q)[1]){
out[i] = pmvnorm(lower = rep(-Inf, 2), upper = c(q[i,1],q[i,2]), mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
}
mean(out)
}
C.t.t = function(t,del.l,del.u,rho){
solver <- function(t,del.l,del.u,rho){
x<- qasympl.sum(t,del.l,del.u)
out <- pasympl.gauss1(t,t, del.l,del.u,rho)
out
}
sapply(t, solver , del.l = del.l ,del.u = del.u,rho=rho)
}
chi.l <- function(t, del.l,del.u,rho){
out = C.t.t(t,del.l,del.u,rho)/t
out
}
chi.u <- function(t,del.l ,del.u,rho){
out <- (1 - (2*t) + C.t.t(t,del.l,del.u,rho))/(1-t)
out
}
#######################################
rho = mles[3]
del.l = mles[1]
del.u = mles[2]
rho
del.l
del.u
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.l, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("x") + ylab("Lower tail Coefficient")
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("x") + ylab("Lower tail Coefficient")
C.t.t(0,0,0.2,0.3,0.1)
C.t.t(0,0.2,0.3,0.1)
C.t.t(0.0001,0.2,0.3,0.1)
pasympl.gauss(0.0001,0.3,0.3,0.5,0.8)
