coeff <- del.l * as.numeric(x <= 0) + del.u * as.numeric(x > 0)
out <- coeff * exp(-abs(x) / coeff) / (del.l + del.u)
out <- ifelse(x <= 0, out, 1 - out)
return(out)
}
dasymlp <- function(x, del.l, del.u){
coeff <- del.l * as.numeric(x <= 0) + del.u * as.numeric(x > 0)
out <- exp(-abs(x) / coeff) / (del.l + del.u)
return(out)
}
qasymlp <- function(p, del.l, del.u){
cutoff <- del.l / (del.l + del.u)
part1 <- (del.l + del.u) / (del.l * as.numeric(p <= cutoff) + del.u * as.numeric(p > cutoff))
part2 <- ifelse(p <= cutoff, log(p), log(1 - p))
part3 <- (del.l * as.numeric(p <= cutoff) - del.u * as.numeric(p > cutoff))
out <- part3 * (log(part1) + part2)
out}
rasymlp <- function(n, del.l, del.u){qasymlp(runif(n), del.l, del.u)}
k1 <- function(del.l, del.u){
del.l^3 / ((del.l + del.u) * (2 * del.l - 1) * (1 + del.l - del.u))}
k2 <- function(del.l, del.u){
(del.l - 1)^3 / ((2 * del.l - 1) * (del.l - del.u - 1) * (2 - del.l - del.u))}
k3 <- function(del.l, del.u){
del.u^3 / ((del.l + del.u) * (2 * del.u - 1) * (del.l - del.u - 1))}
k4 <- function(del.l, del.u){
(del.u - 1)^3 / ((2 * del.u - 1) * (1 + del.l - del.u) * (2 - del.l - del.u))}
k5 <- function(del.l, del.u){2 / ((1 + 2 * del.u) * (2 * del.u - 3))}
k6 <- function(del.l, del.u){
(-12 * del.u + 12 * del.u^2 - 5) / ((1 + 2 * del.u)^2 * (2 * del.u - 3)^2)}
k7 <- function(del.l, del.u){4 * del.u^3 / ((1 + 2 * del.u)^2 * (2 * del.u - 1))}
k8 <- function(del.l, del.u){4 * (del.u - 1)^3 / ((2 * del.u - 3)^2 * (2 * del.u - 1))}
k9 <- function(del.l, del.u){4 * del.l^3 / ((1 + 2 * del.l)^2 * (2 * del.l - 1))}
k10 <- function(del.l, del.u){4 * (del.l - 1)^3 / ((2 * del.l - 3)^2 * (2 * del.l - 1))}
k11 <- function(del.l, del.u){2 / ((1 + 2 * del.l) * (2 * del.l - 3))}
k12 <- function(del.l, del.u){
(-12 * del.l + 12 * del.l^2 - 5) / ((1 + 2 * del.l)^2 * (2 * del.l - 3)^2)}
pasympl.sum <- function(x, del.l, del.u){
if((del.l == 0.5) & (del.u == 0.5)){
val <- ifelse(x <= 0, 0.5 * (1 - x) * exp(2 * x), 1 - 0.5 * (1 + x) * exp(-2 * x))
}else if((del.l == 0.5) & (del.u != 0.5)){
val <- ifelse(x <= 0, (k5(del.l, del.u) * x - k6(del.l, del.u)) * exp(2 * x),
1 - k7(del.l, del.u) * exp(-x / del.u) - k8(del.l, del.u) * exp(x / (del.u - 1)))
}else if((del.l != 0.5) & (del.u == 0.5)){
val <- ifelse(x <= 0, k9(del.l, del.u) * exp(x / del.l) + k10(del.l, del.u) * exp(x / (1 - del.l)),
1 + (k11(del.l, del.u) * x + k12(del.l, del.u)) * exp(-2 * x))
}else{
val <- ifelse(x <= 0, k1(del.l, del.u) * exp(x / del.l) - k2(del.l, del.u) * exp(x / (1 - del.l)),
1 + k3(del.l, del.u) * exp(-x / del.u) - k4(del.l, del.u) * exp(x / (del.u - 1)))
}
return(val)}
dasympl.sum <- function(x, del.l, del.u){
if((del.l == 0.5) & (del.u == 0.5)){
val <- (1 + abs(x)) * exp(-2 * abs(x)) - 0.5 * exp(-2 * abs(x))
}else if((del.l == 0.5) & (del.u != 0.5)){
val <- ifelse(x <= 0, exp(2 * x) * (k5(del.l, del.u) * (1 + 2 * x) - 2 * k6(del.l, del.u)),
k7(del.l, del.u) / del.u * exp(-x / del.u) +
k8(del.l, del.u) / (1 - del.u) * exp(-x / (1 - del.u)))
}else if((del.l != 0.5) & (del.u == 0.5)){
val <- ifelse(x <= 0, k9(del.l, del.u) / del.l * exp(x / del.l) +
k10(del.l, del.u) / (1 - del.l) * exp(x / (1 - del.l)),
exp(-2 * x) * (k11(del.l, del.u) * (1 - 2 * x) - 2 * k12(del.l, del.u)))
}else{
val <- ifelse(x <= 0, k1(del.l, del.u) / del.l * exp(x / del.l) -
k2(del.l, del.u) / (1 - del.l) * exp(x / (1 - del.l)),
-k3(del.l, del.u) / del.u * exp(-x / del.u) +
k4(del.l, del.u) / (1 - del.u) * exp(-x / (1 - del.u)))
}
return(val)}
qasympl.sum_0.5_0.5 <- function(p){
solver <- function(x){abs(log(ifelse(p < 0.5, p, 1 - p)) - log(0.5) - log(1 - x) - 2 * x)}
solver.logit <- function(xx){solver(log(xx) - log(1 - xx))}
out <- optimize(solver.logit, c(0, 0.5), tol = 1e-10)$minimum
out <- log(out) - log(1 - out)
out <- ifelse(p < 0.5, out, -out)
out}
qasympl.sum_del.l_del.u <- function(p, del.l, del.u){
cdf0 <- pasympl.sum(0, del.l, del.u)
if(p <= cdf0){
solver <- function(x){
if(del.l > 0.5){
val <- abs(log(p) - x / del.l -
log(k1(del.l, del.u) - k2(del.l, del.u) *
exp(x * (2 * del.l - 1) / (del.l * (1 - del.l)))))
}else{
val <- abs(log(p) - x / (1 - del.l) -
log(k1(del.l, del.u) * exp(x * (1 - 2 * del.l) / (del.l * (1 - del.l))) -
k2(del.l, del.u)))}
val}
solver.logit <- function(xx){solver(log(xx) - log(1 - xx))}
out <- optimize(solver.logit, c(0, cdf0), tol = 1e-10)$minimum
out <- log(out) - log(1 - out)
}else{
solver <- function(x){
if(del.u > 0.5){
val <- abs(log(1 - p) + x / del.u -
log(-k3(del.l, del.u) + k4(del.l, del.u) *
exp(x * (1 - 2 * del.u) / (del.u * (1 - del.u)))))
}else{
val <- abs(log(1 - p) + x / (1 - del.u) -
log(-k3(del.l, del.u) * exp(x * (2 * del.u - 1) / (del.u * (1 - del.u))) +
k4(del.l, del.u)))}
val}
solver.logit <- function(xx){solver(log(xx) - log(1 - xx))}
out <- optimize(solver.logit, c(cdf0, 1), tol = 1e-10)$minimum
out <- log(out) - log(1 - out)}
out}
qasympl.sum_0.5_del.u <- function(p, del.u){
del.l <- 0.5
cdf0 <- pasympl.sum(0, del.l, del.u)
if(p <= cdf0){
solver <- function(x){
abs(log(p) - 2 * x - log((k5(del.l, del.u) * x) - k6(del.l, del.u)))}
solver.logit <- function(xx){solver(log(xx) - log(1 - xx))}
out <- optimize(solver.logit, c(0, cdf0), tol = 1e-10)$minimum
out <- log(out) - log(1 - out)
}else{
solver <- function(x){
if(del.u > 0.5){
val <- abs(log(1 - p) + x / del.u -
log(k7(del.l, del.u) + k8(del.l, del.u) *
exp(x * (1 - 2 * del.u) / (del.u * (1 - del.u)))))
}else{
val <- abs(log(1 - p) + x / (1 - del.u) -
log(k7(del.l, del.u) * exp(x * (2 * del.u - 1) / (del.u * (1 - del.u))) +
k8(del.l, del.u)))}
val}
solver.logit <- function(xx){solver(log(xx) - log(1 - xx))}
out <- optimize(solver.logit, c(cdf0, 1), tol = 1e-10)$minimum
out <- log(out) - log(1 - out)}
out}
qasympl.sum_del.l_0.5 <- function(p, del.l){
del.u <- 0.5
cdf0 <- pasympl.sum(0, del.l, del.u)
if(p > cdf0){
solver <- function(x){
abs(log(1 - p) + 2 * x - log(-k11(del.l, del.u) * x - k12(del.l, del.u)))}
solver.logit <- function(xx){solver(log(xx) - log(1 - xx))}
out <- optimize(solver.logit, c(cdf0, 1), tol = 1e-10)$minimum
out <- log(out) - log(1 - out)
}else{
solver <- function(x){
if(del.l > 0.5){
val <- abs(log(p) - x / del.l - log(k9(del.l, del.u) + k10(del.l, del.u) *
exp(x * (2 * del.l - 1) / (del.l * (1 - del.l)))))
}else{
val <- abs(log(p) - x / (1 - del.l) -
log(k9(del.l, del.u) * exp(x * (1 - 2 * del.l) / (del.l * (1 - del.l))) +
k10(del.l, del.u)))}
val}
solver.logit <- function(xx){solver(log(xx) - log(1 - xx))}
out <- optimize(solver.logit, c(0, cdf0), tol = 1e-10)$minimum
out <- log(out) - log(1 - out)}
out}
qasympl.sum <- function(p, del.l, del.u){
if((del.l == 0.5) & (del.u == 0.5)){
return(qasympl.sum_0.5_0.5(p))
}else if((del.l == 0.5) & (del.u != 0.5)){
return(qasympl.sum_0.5_del.u(p, del.u))
}else if((del.l != 0.5) & (del.u == 0.5)){
return(qasympl.sum_del.l_0.5(p, del.l))
}else{
return(qasympl.sum_del.l_del.u(p, del.l, del.u))
}
}
qnorm.pasymlp <- function(x, del.l, del.u){
coeff <- del.l * as.numeric(x <= 0) + del.u * as.numeric(x > 0)
out <- coeff * exp(-abs(x) / coeff) / (del.l + del.u)
out <- ifelse(x <= 0, qnorm(out), -qnorm(out))
return(out)
}
pasympl.gauss <- function(x1, x2, del.l, del.u, rho){
den.integrand <- function(x){
sapply(x, function(xx){
r <- log(xx) - log(1 - xx)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- c(q1, q2)
out <- pmvnorm(lower = rep(-Inf, 2), upper = q, mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
out <- out * dasymlp(r, del.l, del.u)
out <- out / (xx * (1 - xx))
out})}
out <- integrate(den.integrand, lower = 0, upper = 1)$value
out}
pasympl.gauss1 <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out = numeric(length = dim(q)[1])
for(i in 1:dim(q)[1]){
out[i] = pmvnorm(lower = rep(-Inf, 2), upper = c(q[i,1],q[i,2]), mean = c(0, 0),
corr = matrix(c(1, rho, rho, 1), nrow = 2))[1]
}
mean(out)
}
dasympl.gauss <- function(x1, x2, del.l, del.u, rho){
r <- qasymlp(runif(1e3),del.l, del.u)
q1 <- qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u)
q2 <- qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u)
q <- cbind(q1, q2)
out <- dmvnorm(q, mean = c(0, 0), sigma = matrix(c(1, rho, rho, 1), nrow = 2), log = T)
out <- out + log(dasymlp(x1 - r, 1 - del.l, 1 - del.u)) +
log(dasymlp(x2 - r, 1 - del.l, 1 - del.u))
out <- out - dnorm(qnorm.pasymlp(x1 - r, 1 - del.l, 1 - del.u), log = T) -
dnorm(qnorm.pasymlp(x2 - r, 1 - del.l, 1 - del.u), log = T)
mean(exp(out))}
transform <- list(
logit = function(x, lower = 0, upper = 1){
x <- (x - lower) / (upper - lower)
return(log(x / (1 - x)))
},
inv.logit = function(x, lower = 0, upper = 1){
p <- exp(x) / (1 + exp(x))
p <- p * (upper - lower) + lower
return(p)
}
)
C.t.t = function(t,del.l,del.u,rho){
solver <- function(t,del.l,del.u,rho){
x<- qasympl.sum(t,del.l,del.u)
out <- pasympl.gauss1(x,x, del.l,del.u,rho)
out}
sapply(t, solver , del.l = del.l ,del.u = del.u,rho=rho)}
chi.l <- function(t, del.l,del.u,rho){
out <- C.t.t(t,del.l,del.u,rho)/t
out}
chi.u <- function(t,del.l ,del.u,rho){
out <- (1 - (2*t) + C.t.t(t,del.l,del.u,rho))/(1-t)
out}
c.u1.u2 <- function(u1, u2, del.l, del.u, rho){
x.1 <- qasympl.sum(u1, del.l, del.u)
x.2 <- qasympl.sum(u2, del.l, del.u)
out <- dasympl.gauss(x.1, x.2, del.l, del.u, rho) /
(dasympl.sum(x.1, del.l, del.u) * dasympl.sum(x.2, del.l, del.u))
out}
u <- seq(0.01, 0.99, 0.01)
chi.l.vals <- sapply(u, function(u.val){chi.l(u.val, del.l = 0.2556414, del.u = 0.5027140 , rho = 0.2145668)})
chi.u.vals <- sapply(u, function(u.val){chi.u(u.val,del.l = 0.2556414, del.u = 0.5027140 , rho = 0.2145668)})
plot(u, chi.l.vals,xlab = "t", ylab = "chi.l", type = "l")
plot(u, chi.u.vals, xlab = "t", ylab = "chi.u",type = "l")
```
Indigo <- read_csv("INGL Historical Data.csv")
SpiceJet <- read_csv("SPJT Historical Data.csv")
Indigo <- Indigo[-c(497:507), ]
SpiceJet <- SpiceJet[-c(498:508), ]
years.Indigo <- as.vector(sapply(Indigo$Date, function(x){
as.numeric(strsplit(x, split = " ")[[1]][3])}))
years.SpiceJet <- as.vector(sapply(SpiceJet$Date, function(x){
as.numeric(strsplit(x, split = " ")[[1]][3])}))
days.Indigo <- as.vector(sapply(Indigo$Date, function(x){
as.numeric(strsplit(strsplit(x, split = ", ")[[1]][1], split = " ")[[1]][2])}))
days.SpiceJet <- as.vector(sapply(SpiceJet$Date, function(x){
as.numeric(strsplit(strsplit(x, split = ", ")[[1]][1], split = " ")[[1]][2])}))
months.Indigo <- as.vector(sapply(Indigo$Date, function(x){strsplit(x, split = " ")[[1]][1]}))
months.SpiceJet <- as.vector(sapply(SpiceJet$Date, function(x){strsplit(x, split = " ")[[1]][1]}))
months.Indigo <- as.vector(sapply(months.Indigo, function(x){which(month.abb == x)}))
months.SpiceJet <- as.vector(sapply(months.SpiceJet, function(x){which(month.abb == x)}))
identify.issue <- which(sapply(1:507, function(i){
sum((months.Indigo - months.SpiceJet[-i])^2) +
sum((years.Indigo - years.SpiceJet[-i])^2) +
sum((days.Indigo - days.SpiceJet[-i])^2)}) == 0)
SpiceJet <- SpiceJet[-identify.issue, ]
years <- years.Indigo
months <- months.Indigo
days <- days.Indigo
nt <- length(Indigo$Date)
logreturn.Indigo <- log(Indigo$Price[-1]) - log(Indigo$Price[-nt])
logreturn.SpiceJet <- log(SpiceJet$Price[-1]) - log(SpiceJet$Price[-nt])
par(mfrow = c(1, 2))
acf(logreturn.Indigo)
acf(logreturn.SpiceJet)
######################################
dates <- mdy(Indigo$Date)
df <- data.frame(date = dates[-1],
Indigo =logreturn.Indigo,
SpiceJet =logreturn.SpiceJet)
##############################################
p <- ggplot(df) + geom_line(aes(x = date, y = SpiceJet), size = 1) +
xlab(NULL) + ylab("Average-Price") +
ggtitle("Daily average price of SpiceJet airlines") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),
plot.title = element_text(size=20))
################################################
Indigo.rank <- (rank(df$Indigo) + 0.5) / (length(df$Indigo) + 1)
SpiceJet.rank <- (rank(df$SpiceJet) + 0.5) / (length(df$SpiceJet) + 1)
df2 <- data.frame(Indigo.rank = Indigo.rank,
SpiceJet.rank = SpiceJet.rank)
#############################################33#whole data
init <- c(transform$logit(0.24, 0.01, 0.99),
transform$logit(0.48, 0.01, 0.99),
transform$logit(0.2, -0.99, 0.99))
X <- cbind(df$Indigo, df$SpiceJet)
X <- apply(X, 2, rank) / (nrow(X) + 1)
# emp.para <- gev.fit(X[,1])$mle
# X[,1] <- pgev(X[,1], loc =  emp.para[1], scale = emp.para[2] , shape = emp.para[3] )
# emp.para <- gev.fit(X[,2])$mle
# X[,2] <- pgev(X[,2], loc =  emp.para[1], scale = emp.para[2] , shape = emp.para[3] )
#
opt = optim(init, neg.log, hessian = T)
mles <- opt$par
mles <- c(transform$inv.logit(mles[1], 0.01, 0.99),
transform$inv.logit(mles[2], 0.01, 0.99),
transform$inv.logit(mles[3], -0.99, 0.99))
opt
mles
sqrt(diag(solve(opt$hessian)))
plot(u, chi.l.vals,xlab = "t", ylab = "chi.l", type = "l")
plot(u, chi.u.vals, xlab = "t", ylab = "chi.u",type = "l")
plot(u, chi.u.vals, xlab = "t", ylab = "chi.u",type = "l")
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Upper tail Coefficient")
#######################################
rho = mles[3]
del.l = mles[1]
del.u = mles[2]
base <- ggplot() + xlim(0.1, 0.9)
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Upper tail Coefficient")
base <- ggplot() + xlim(0.01, 0.99)
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Upper tail Coefficient")
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Upper tail Coefficient") +theme(axis.text=element_text(size=20),
axis.title=element_text(size=20),
plot.title = element_text(size=20))
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Upper tail Coefficient")
base <- ggplot() + xlim(0.01, 0.99)
base + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Upper tail Coefficient")
ggsave("upper_chi", last_plot())
ggsave()
p <- ggplot() + xlim(0.01, 0.99) + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Upper tail Coefficient")
p
ggsave(p, "upper_chi.png", height = 6, width = 6)
ggsave(p, "upper_chi1.png", height = 6, width = 6)
ggsave(p, "upper_chi1.pdf", height = 6, width = 6)
ggsave(p, filename = "upper_chi1.pdf", height = 6, width = 6)
ggsave(p, filename = "upper_chi1.png", height = 6, width = 6)
p <- ggplot() + xlim(0.01, 0.99) + geom_function(fun = chi.l, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Lower tail Coefficient")
p
ggsave(p, filename = "Lower_chi1.pdf", height = 6, width = 6)
p <- ggplot() + xlim(0.01, 0.99) + geom_function(fun = chi.l, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Lower tail Coefficient") + theme(axis.text=element_text(size=10),
axis.title=element_text(size=10),
plot.title = element_text(size=10))
p
p <- ggplot() + xlim(0.01, 0.99) + geom_function(fun = chi.l, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Lower tail Coefficient") + theme(axis.text=element_text(size=10),
axis.title=element_text(size=20),
plot.title = element_text(size=20))
p
p <- ggplot() + xlim(0.01, 0.99) + geom_function(fun = chi.l, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Lower tail Coefficient") + theme(axis.text=element_text(size=10),
axis.title=element_text(size=15),
plot.title = element_text(size=15))
p
ggsave(p, filename = "Lower_chi1.pdf", height = 6, width = 6)
p <- ggplot() + xlim(0.01, 0.99) + geom_function(fun = chi.u, args = list(del.l  = del.l, del.u = del.u,rho = rho))+
# coord_cartesian(ylim = c(0, 1)) +
xlab("t") + ylab("Upper tail Coefficient") + theme(axis.text=element_text(size=10),
axis.title=element_text(size=15),
plot.title = element_text(size=15))
p
ggsave(p, filename = "Upper_chi1.pdf", height = 6, width = 6)
y1 <- chi.u(x1,0.3,0.2,0.3)
x1<- seq(0.01,0.99,0.01)
y1 <- chi.u(x1,0.3,0.2,0.3)
y1
x1<- seq(0.01,0.99,0.01)
y1 <- chi.u(x1,0.3,0.2,0.5)
x2<- seq(0.01,0.99,0.01)
y2 <- chi.l(x1,0.3,0.2,0.5)
x3<- seq(0.01,0.99,0.01)
y3 <- chi.u(x1,0.8,0.8,0.5)
x4<- seq(0.01,0.99,0.01)
y4 <- chi.l(x1,0.3,0.2,0.5)
x5<- seq(0.01,0.99,0.01)
y5 <- chi.u(x1,0.3,0.8,0.5)
x6<- seq(0.01,0.99,0.01)
y6 <- chi.l(x1,0.3,0.8,0.5)
x7<- seq(0.01,0.99,0.01)
y7 <- chi.u(x1,0.5,0.5,0.5)
x8<- seq(0.01,0.99,0.01)
y8 <- chi.l(x1,0.5,0.5,0.5)
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "black"), size = 1.5) +
geom_line(aes(x = x3, y = y3, color = "red"), size = 1.5) +
geom_line(aes(x = x5, y = y5, color = "blue"), size = 1.5) +
geom_line(aes(x = x7, y = y7, color = "yellow"), size = 1.5)
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "black"), size = 0.7) +
geom_line(aes(x = x3, y = y3, color = "red"), size = 0.7) +
geom_line(aes(x = x5, y = y5, color = "blue"), size = 0.7) +
geom_line(aes(x = x7, y = y7, color = "yellow"), size = .7)
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 0.7) +
geom_line(aes(x = x3, y = y3, color = "red"), size = 0.7) +
geom_line(aes(x = x5, y = y5, color = "blue"), size = 0.7) +
geom_line(aes(x = x7, y = y7, color = "yellow"), size = .7)
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 0.7) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 0.7) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 0.7) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = .7)
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = 1)
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "black"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = 1)
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = 1)
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = 1) + xlab("t") + ylab('Upper tail Coefficient')
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = 1) + xlab("t") + ylab('Upper tail Coefficient')
+ scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend",
name = "SD variation",
labels = c("del.l = 0.3, del.u = 0.2", "SD = 1.5", "SD = 2"))
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = 1) + xlab("t") + ylab('Upper tail Coefficient') + scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend",
name = "SD variation",
labels = c("del.l = 0.3, del.u = 0.2", "SD = 1.5", "SD = 2"))
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = 1) + xlab("t") + ylab('Upper tail Coefficient') + scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend",
name = "SD variation",
labels = c("del.l = 0.3, del.u = 0.2", "df","SD = 1.5", "SD = 2"))
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "orange"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "blue"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "green"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "purple"), size = 1) + xlab("t") + ylab('Upper tail Coefficient') +
scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend")
p0
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "black"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "green"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "red"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "blue"), size = 1) + xlab("t") + ylab('Upper tail Coefficient') +
scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend")
p0
ggsave(p0, filename = "random_Upper_chi.pdf", height = 6, width = 6)
p1 = ggplot() + geom_line(aes(x = x2, y = y2, color = "black"), size = 1) +
geom_line(aes(x = x4, y = y4, color = "green"), size = 1) +
geom_line(aes(x = x6, y = y6, color = "red"), size = 1) +
geom_line(aes(x = x8, y = y8, color = "blue"), size = 1) + xlab("t") + ylab('Upper tail Coefficient') +
scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend")
p1
ggsave(p0, filename = "random_Upper_chi.pdf", height = 6, width = 6)
ggsave(p0, filename = "random_Lower_chi.pdf", height = 6, width = 6)
ggsave(p0, filename = "random_Upper_chi.pdf", height = 6, width = 6)
ggsave(p1, filename = "random_Lower_chi.pdf", height = 6, width = 6)
p0 = ggplot() + geom_line(aes(x = x1, y = y1, color = "black"), size = 1) +
geom_line(aes(x = x3, y = y3, color = "green"), size = 1) +
geom_line(aes(x = x5, y = y5, color = "red"), size = 1) +
geom_line(aes(x = x7, y = y7, color = "blue"), size = 1) + xlab("t") + ylab('Upper tail Coefficient') +
scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend") + theme(axis.text=element_text(size=10),
axis.title=element_text(size=15),
plot.title = element_text(size=15))
p0
ggsave(p0, filename = "random_Upper_chi.pdf", height = 6, width = 6)
p1 = ggplot() + geom_line(aes(x = x2, y = y2, color = "black"), size = 1) +
geom_line(aes(x = x4, y = y4, color = "green"), size = 1) +
geom_line(aes(x = x6, y = y6, color = "red"), size = 1) +
geom_line(aes(x = x8, y = y8, color = "blue"), size = 1) + xlab("t") + ylab('Upper tail Coefficient') +
scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend")  + theme(axis.text=element_text(size=10),
axis.title=element_text(size=15),
plot.title = element_text(size=15))
p1
ggsave(p1, filename = "random_Lower_chi.pdf", height = 6, width = 6)
p1 = ggplot() + geom_line(aes(x = x2, y = y2, color = "black"), size = 1) +
geom_line(aes(x = x4, y = y4, color = "green"), size = 1) +
geom_line(aes(x = x6, y = y6, color = "red"), size = 1) +
geom_line(aes(x = x8, y = y8, color = "blue"), size = 1) + xlab("t") + ylab('Lower tail Coefficient') +
scale_color_identity(breaks = c("black","green", "red", "blue"),  guide = "legend")  + theme(axis.text=element_text(size=10),
axis.title=element_text(size=15),
plot.title = element_text(size=15))
p1
ggsave(p1, filename = "random_Lower_chi.pdf", height = 6, width = 6)
save.image("last.RData")
